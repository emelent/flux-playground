@using Fluxor
@using FluxorSample.Data
@using FluxorSample.Data.Counter
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<CounterState> _counterState

<div class="modify-container">
    <label for="chanceOfSuccess">Chance of Success:</label>
    <input 
        name="chanceOfSuccess"
        type="number"
        @bind="ChanceOfSuccess"
        placeholder="Chance of successs"
        min="0.0"
        max="1.0"
        step="0.1"
    >
    <br/>
    <br/>
    <button
        disabled="@(counterState.Loading)"
        @onclick="Increment">
        Increment
    </button>
    <button
        disabled="@(counterState.Loading)"
        @onclick="Decrement">
        Decrement
    </button>
    @if (counterState.ErrorMessage != string.Empty)
    {
        <div style="color: red;">
            Failed: @counterState.ErrorMessage
        </div>
    }
</div>

@code {


    private double ChanceOfSuccess { get; set; } = 0.8;
    private CounterState counterState => _counterState.Value;

    private void Decrement()
    {
        Dispatcher.Dispatch(new CounterDecrement<RequestedAction<double>>(
            new RequestedAction<double>(ChanceOfSuccess)
        ));
    }


    private void Increment()
    {
        Dispatcher.Dispatch(new CounterIncrement<RequestedAction<double>>(
            new RequestedAction<double>(ChanceOfSuccess)
        ));
    }
}